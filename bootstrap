;; -*- mode: emacs-lisp; lexical-binding: t; -*-
(defvar parcel-directory (expand-file-name "parcel/" user-emacs-directory))
(let ((parcel-repo (expand-file-name "parcel/" parcel-directory)))
  (add-to-list 'load-path parcel-repo)
  (unless (file-exists-p parcel-repo)
    (let ((buffer (get-buffer-create "*parcel-bootstrap*")))
      (condition-case-unless-debug err
          (progn
            ;;clone parcel
            (unless (zerop (call-process "git" nil (list buffer t) t
                                         "clone" "git@github.com:progfolio/parcel.git"
                                         parcel-repo))
              (error "%s" (list (with-current-buffer buffer (buffer-string)))))
            ;;@TODO: checkout parcel using parcel?
            ;;@TODO: build parcel using parcel?
            (byte-recompile-directory parcel-repo 0 'force))
        ((error)
         (when (file-exists-p parcel-directory)
           (delete-directory parcel-directory 'recursive))
         (with-current-buffer buffer
           (goto-char (point-max))
           (insert (format "\n%S" err))
           (display-buffer buffer))))
      (kill-buffer buffer))))


;;@TEST: clean repo
(when nil
  (when (file-exists-p parcel-directory)
    (delete-directory parcel-directory 'recursive)))
